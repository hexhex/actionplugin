#boolMatrix[setDimension, Nr, Nc]{b, 5} :- max_row(Nr), max_column(Nc), haveToSetDimension.

haveToSetDimension :- &haveToSetDimension[]().

lived(R, C) :- not haveToSetDimension, &getValue[R, C](), row(R), column(C).

neighbours(R, C, Rn, Cn) :- row(R), column(C), R = Rn + 1, C = Cn + 1, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), R = Rn + 1, C = Cn, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), R = Rn + 1, Cn = C + 1, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), R = Rn, C = Cn + 1, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), R = Rn, Cn = C + 1, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), Rn = R + 1, C = Cn + 1, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), Rn = R + 1, C = Cn, lived(Rn, Cn).
neighbours(R, C, Rn, Cn) :- row(R), column(C), Rn = R + 1, Cn = C + 1, lived(Rn, Cn).

%  Any live cell with fewer than two live neighbours dies, as if caused by under-population.
kill(R, C) :- lived(R, C), #count{Rn, Cn : neighbours(R, C, Rn, Cn)} < 2.

%  Any live cell with two or three live neighbours lives on to the next generation.

%  Any live cell with more than three live neighbours dies, as if by overcrowding.
kill(R, C) :- lived(R, C), #count{Rn, Cn : neighbours(R, C, Rn, Cn)} > 3.

%  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
resurrects(R, C) :- not lived(R, C), #count{Rn, Cn : neighbours(R, C, Rn, Cn)} = 3, row(R), column(C).

#boolMatrix[add, R, C]{b, 10} :- resurrects(R, C).
#boolMatrix[remove, R, C]{b, 10} :- kill(R, C).

#boolMatrix[print, "@", " "]{b, 15}.