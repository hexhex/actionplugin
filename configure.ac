AC_PREREQ(2.61)
AC_INIT([dlvhex],[1.7.0],[tkren@kr.tuwien.ac.at])
AC_CONFIG_SRCDIR([src/dlvhex/dlvhex.cpp])
AC_CONFIG_HEADER([src/config.h])
#AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_HOST

#
# check host system
# this will be used in include/common.h.in
#
case $host in
    *-*-msdos* | *-*-go32* | *-*-mingw32* | *-*-cygwin* | *-*-windows*)
        HAVE_WIN32=1
        ;;
    *)
        ;;
esac
AC_SUBST([HAVE_WIN32])

#
# the default system-wide plugin dir $(pkglibdir)/plugins can be
# overridden by setting PLUGIN_DIR=... at configure-time
#
if test "$SYS_PLUGIN_DIR" = ""; then
    sysplugindir="\${pkglibdir}/plugins"
else
    sysplugindir="$SYS_PLUGIN_DIR"
fi

AC_SUBST(sysplugindir)

CPPFLAGS="$CPPFLAGS -DSYS_PLUGIN_DIR='\"$sysplugindir\"'"

#
# the user plugin dir consists of the user home concatenated with
# and USER_PLUGIN_DIR, which is .dlvhex/plugins by default and can be
# overridden by setting USER_PLUGIN_DIR=... at configure-time
#
if test "$USER_PLUGIN_DIR" = ""; then
    userplugindir=".dlvhex/plugins"
else
    userplugindir="$USER_PLUGIN_DIR"
fi

AC_SUBST(userplugindir)

CPPFLAGS="$CPPFLAGS -DUSER_PLUGIN_DIR='\"$userplugindir\"'"


#
# the user didn't supply a path for dlv
#
if test "$DLV" = ""; then
    # we assume "dlv"
    DLV=dlv
    # and check if it exists
    AC_CHECK_PROG(DLVPATH, $DLV, $DLV, notfound)
else
    # the user supplied a 'DLV=...'
    # check if it exists (with search path=/, since the user supplied
    # an entire path!) and set DLVPATH to it!
    AC_CHECK_PROG(DLVPATH, $DLV, $DLV, notfound, [/])
fi

if test "$DLVPATH" = notfound; then
    AC_MSG_ERROR([dlv not found. Download it at http://www.dlvsystem.com/])
fi

#
# put the dlv path into config.h
#
AC_DEFINE_UNQUOTED(DLVPATH,"$DLVPATH",[Path of DLV executable])


#
# the user didn't supply a path for dlvdb
#
if test "$DLVDB" = ""; then
    # we assume "dlvdb"
    DLVDB=dlvdb
    # and check if it exists
    AC_CHECK_PROG(DLVDBPATH, $DLVDB, $DLVDB, notfound)
else
    # the user supplied a 'DLVDB=...'
    # check if it exists (with search path=/, since the user supplied
    # an entire path!) and set DLVPATH to it!
    AC_CHECK_PROG(DLVDBPATH, $DLVDB, $DLVDB, notfound, [/])
fi

if test "$DLVDBPATH" = notfound; then
    AC_MSG_WARN([Disabled support for dlvdb. Download it at http://www.mat.unical.it/terracina/dlvdb/])
else
    # put the dlvdb path into config.h
    AC_DEFINE_UNQUOTED(DLVDBPATH,"$DLVDBPATH",[Path of DLVDB executable])
    AC_DEFINE([HAVE_DLVDB], [1], [Defined if we found dlvdb.])
fi



AM_INIT_AUTOMAKE

# Check for C/C++ compiler
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP

# set default warning parameters for g++ compatible compilers
if test "$GXX" = "yes"; then
   CXXFLAGS="$CXXFLAGS -W -Wall"
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_CHECK_HEADERS([sys/param.h])

# by default we look into /opt/local and /sw for include files (macports vs. fink)
case $host_os in
     darwin*|macosx*)
	CPPFLAGS="$CPPFLAGS -I/opt/local/include -I/sw/include"
     ;;
esac 

# Checks for libtool's libltdl
AC_LIB_LTDL
AC_LIBLTDL_CONVENIENCE
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

################################################
# you may need to comment out the following line
################################################
#AC_CONFIG_SUBDIRS([libltdl]) 


#
# Check for external libraries
#

# cppunit is optional -> give warning in ACTION-IF-NOT-FOUND
PKG_CHECK_MODULES([CPPUNIT], [cppunit >= 1.12.0], [have_cppunit=true], [have_cppunit=false])
if test x$have_cppunit = xfalse; then
   AC_MSG_WARN([could not find cppunit >= 1.12.0, `make check' will fail. Please download it from http://cppunit.sourceforge.net/ and setup PKG_CONFIG_PATH appropriately.])
fi

AM_CONDITIONAL([HAVE_CPPUNIT], [test x$have_cppunit = xtrue])

# checking for boost libs
BOOST_REQUIRE([1.33.0])
BOOST_SMART_PTR
BOOST_STRING_ALGO
BOOST_TOKENIZER
BOOST_IOSTREAMS
BOOST_REGEX
#BOOST_GRAPH #right now, we don't care about the libboost-graph shared library
BOOST_FIND_HEADER([boost/ptr_container/indirect_fun.hpp])
BOOST_FIND_HEADER([boost/graph/adjacency_list.hpp])

# debug
AC_ARG_ENABLE(debug,
              [  --enable-debug          switch on debug routines (timers, ...)],
              [AC_DEFINE(DLVHEX_DEBUG, [], [Turns on timer routines for profiling])
               debug_support=yes]
              )

# for debug, we need the boost_date_time library
if test "$debug_support" = "yes"; then
   BOOST_DATE_TIME
fi


#
# check for libcurl
#
LIBCURL_CHECK_CONFIG([], [], [], [AC_MSG_ERROR([could not find CURL library. Download it at http://curl.haxx.se/.])])


#
# doxygen stuff
#
# these are the defaults, can be overridden by --enable-doxygen-...
DX_HTML_FEATURE([ON])
DX_CHM_FEATURE([OFF])
DX_CHI_FEATURE([OFF])
DX_MAN_FEATURE([OFF])
DX_RTF_FEATURE([OFF])
DX_XML_FEATURE([OFF])
DX_PDF_FEATURE([OFF])
DX_PS_FEATURE([OFF])
DX_INIT_DOXYGEN([dlvhex], [doxygen.cfg], [doc])


# output autogenerated files
AC_CONFIG_FILES([
           Makefile 
           dlvhex.pc
           examples/Makefile
           include/Makefile
           include/common.h
           include/dlvhex/Makefile
           include/testsuite/Makefile
           include/testsuite/dlvhex/Makefile
           src/Makefile
           src/dlvhex/Makefile
           src/testsuite/Makefile
           src/testsuite/dlvhex/Makefile
])


AC_OUTPUT

dnl output configuration
cat <<EOF
 
$PACKAGE_TARNAME $PACKAGE_VERSION configuration:
 
 prefix: $prefix
 exec_prefix: $exec_prefix
 
 bindir: $bindir
 libdir: $libdir
 pkglibdir: $libdir/$PACKAGE_TARNAME
 datadir: $datadir

 userplugindir: $HOME/$userplugindir
 sysplugindir: $sysplugindir

 Using the following libraries:
 Boost: $BOOST_CPPFLAGS
 Curl: $LIBCURL_CPPFLAGS

EOF
