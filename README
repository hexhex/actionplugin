-*- org -*-


* You want to use just the binary
Read the following subsections and then jump directly to "Running dlvhex" below.

** DLV
dlvhex uses the answer-set solver DLV, which can be downloaded from
<http://www.dlvsystem.com/>
Put the downloaded binary in your path so that it is executable on your system
(don't forget to "chmod +x" it!).  dlvhex is looking for "dlv", so you might
want to rename the downloaded binary or softlink to it.

** dlvhex
Download dlvhex and put it in your $PATH. It should work right away, but
probably you also want to add some plugins. You can put them into a folder
.dlvhex/plugins/ in your home directory, where dlvhex will find them. Or you use
the dlvhex switch --plugindir=... to specify an additional location to search
for plugin libraries. Oh - of course you need dlv also - see below in the
dependency section.


* You want to build and install from the sources
In this case, you probably need to install additional packages.

** Dependencies

*** boost
Boost is a collection of portable C++ source libraries, which are
intended to be widely useful, and usable across a broad spectrum of
applications. You will need a version equal or higher than 1.33.1. See
<http://www.boost.org/>. Follow the instructions of the INSTALL file
found in the distributions tarball.

dlvhex needs the following Boost libraries:
Boost.Graph
Boost.Iostreams
Boost.Smart_Ptr
Boost.String_Algo
Boost.Tokenizer

Popular Linux and Unix distributions such as Fedora, Debian, and
NetBSD include pre-built Boost packages. E.g., in Debian (and Ubuntu),
just do

 $ apt-get install libboost-dev libboost-graph-dev libboost-iostreams-dev

If you have compiled boost by yourself, you have to tell dlvhex'
configure script where you have installed it:

 $ ./configure --with-boost=/path/to/boost/prefix

*** libcurl
libcurl is a multi-protocol file transfer library. dlvhex uses it to
retrieve programs specified by http-scheme URLs. This library is
standard for most operating systems (see <http://curl.haxx.se/libcurl/>
for source packages). Debian provides packages called
libcurl3-openssl-dev and libcurl3-gnutls-dev; install one of these and
you will be able to compile dlvhex.

*** cppunit (optional)
CppUnit is used for the unit-testing of dlvhex, but not necessary for
building the application. See <http://cppunit.sourceforge.net/>. Follow
the instructions of the INSTALL file found in the distributions
tarball.  dlvhex has been tested with cppunit 1.12.0. Like boost,
cppunit packages are provided by the major Linux distributions. E.g.,
in Debian do `apt-get install libcppunit-dev'.

** Configuration
Run "configure" to create the necessary Makefiles. As usual, use the
--prefix switch to specify a custom installation location. dlvhex uses
pkgconfig to share build-related configuration with plugins. So if you
also intend to compile plugins and use a custom prefix for dlvhex,
make sure to adjust the PKG_CONFIG_PATH environment variable
appropriately, otherwise the configuration of the plugins will not
work. E.g., if your prefix is $HOME/localinstall/, then
PKG_CONFIG_PATH needs to be set to $HOME/localinstall/lib/pkgconfig.
If you installed boost in a non-standard folder, add
`--with-boost=/path/to/boost/prefix' to the configure switches to
specify the location of the header files.  If configure complains,
then something vital for building dlvhex is missing in your system. If
you get complaints about missing boost-headers, make sure that you
have the necesary parts of boost installed and that their version is
sufficiently recent (see above).

** Documentation
Run "make doxygen-run" to create the docs (a subdirectory "doc" will
be created). By default, only the html-docs will be built. To enable
other formats, you have to specify the according configure-switch,
e.g., "--enable-doxygen-ps".

** Testing
Run "make check" to build and execute the cppunit-based regression
testsuite. Note that the testsuite is only being built if cppunit is
installed.

** Installation
Run "make install" to install the binary dlvhex, its libraries and the
corresponding header files, which are needed for developing plugins.

* Running dlvhex

Using dlvhex is very similar to working with the answer-set solver dlv. "dlvhex
--help" displays a short help with available command-line parameters. For an
introduction how to write HEX-programs, see
<http://http://www.kr.tuwien.ac.at/research/dlvhex/>

